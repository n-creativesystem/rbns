// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package cmd

import (
	"github.com/n-creativesystem/rbns/bus"
	"github.com/n-creativesystem/rbns/config"
	"github.com/n-creativesystem/rbns/handler/gateway"
	"github.com/n-creativesystem/rbns/handler/grpcserver"
	middleware2 "github.com/n-creativesystem/rbns/handler/grpcserver/middleware"
	"github.com/n-creativesystem/rbns/handler/restserver"
	"github.com/n-creativesystem/rbns/handler/restserver/middleware"
	"github.com/n-creativesystem/rbns/handler/restserver/social"
	"github.com/n-creativesystem/rbns/infra"
	"github.com/n-creativesystem/rbns/service"
	"github.com/n-creativesystem/rbns/storage"
	"github.com/spf13/pflag"
)

// Injectors from wire.go:

func initializeRun(flags *pflag.FlagSet) (*servers, error) {
	configConfig, err := config.NewFlags2Config(flags)
	if err != nil {
		return nil, err
	}
	grpcGateway, err := gateway.New(configConfig)
	if err != nil {
		return nil, err
	}
	socialService := social.ProvideService(configConfig)
	authMiddleware := middleware.NewAuthMiddleware(configConfig, socialService)
	busBus := bus.GetBus()
	factorySet, err := infra.NewFactory(configConfig, busBus)
	if err != nil {
		return nil, err
	}
	v := storage.NewKeyPairs(configConfig)
	store := storage.NewSessionStore(factorySet, v)
	factory, err := storage.Initialize(factorySet)
	if err != nil {
		return nil, err
	}
	server, err := restserver.New(grpcGateway, configConfig, authMiddleware, store, socialService, factory)
	if err != nil {
		return nil, err
	}
	permissionService := service.NewPermissionService()
	permissionServer := grpcserver.NewPermissionServer(permissionService)
	userService := service.NewUserService()
	organizationService := service.NewOrganizationService(userService)
	organizationAggregation := service.NewOrganizationAggregation(permissionService, organizationService, userService)
	roleServer := grpcserver.NewRoleServer(organizationAggregation)
	organizationServer := grpcserver.NewOrganizationService(organizationService, organizationAggregation)
	userServer := grpcserver.NewUserServer(userService, organizationAggregation)
	tenant := middleware2.NewTenantMiddleware(configConfig)
	grpcServer := grpcserver.New(permissionServer, roleServer, organizationServer, userServer, tenant)
	cmdServers := newServer(server, grpcServer, configConfig)
	return cmdServers, nil
}
