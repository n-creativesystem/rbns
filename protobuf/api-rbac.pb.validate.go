// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api-rbac.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on UserKey with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UserKey) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// UserKeyValidationError is the validation error returned by UserKey.Validate
// if the designated constraints aren't met.
type UserKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserKeyValidationError) ErrorName() string { return "UserKeyValidationError" }

// Error satisfies the builtin error interface
func (e UserKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserKeyValidationError{}

// Validate checks the field values on UserEntity with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UserEntity) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserEntityValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserEntityValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UserEntityValidationError is the validation error returned by
// UserEntity.Validate if the designated constraints aren't met.
type UserEntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserEntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserEntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserEntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserEntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserEntityValidationError) ErrorName() string { return "UserEntityValidationError" }

// Error satisfies the builtin error interface
func (e UserEntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserEntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserEntityValidationError{}

// Validate checks the field values on UserCreateKey with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserCreateKey) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// UserCreateKeyValidationError is the validation error returned by
// UserCreateKey.Validate if the designated constraints aren't met.
type UserCreateKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCreateKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCreateKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCreateKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCreateKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCreateKeyValidationError) ErrorName() string { return "UserCreateKeyValidationError" }

// Error satisfies the builtin error interface
func (e UserCreateKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCreateKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCreateKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCreateKeyValidationError{}

// Validate checks the field values on UserRole with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UserRole) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetOrganizationId()) < 1 {
		return UserRoleValidationError{
			field:  "OrganizationId",
			reason: "value length must be at least 1 runes",
		}
	}

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserRoleValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UserRoleValidationError is the validation error returned by
// UserRole.Validate if the designated constraints aren't met.
type UserRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRoleValidationError) ErrorName() string { return "UserRoleValidationError" }

// Error satisfies the builtin error interface
func (e UserRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRoleValidationError{}

// Validate checks the field values on UserRoleDelete with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserRoleDelete) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return UserRoleDeleteValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetOrganizationId()) < 1 {
		return UserRoleDeleteValidationError{
			field:  "OrganizationId",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetRoleId()) < 1 {
		return UserRoleDeleteValidationError{
			field:  "RoleId",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// UserRoleDeleteValidationError is the validation error returned by
// UserRoleDelete.Validate if the designated constraints aren't met.
type UserRoleDeleteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRoleDeleteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRoleDeleteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRoleDeleteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRoleDeleteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRoleDeleteValidationError) ErrorName() string { return "UserRoleDeleteValidationError" }

// Error satisfies the builtin error interface
func (e UserRoleDeleteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRoleDelete.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRoleDeleteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRoleDeleteValidationError{}

// Validate checks the field values on PermissionEntity with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PermissionEntity) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return PermissionEntityValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		return PermissionEntityValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// PermissionEntityValidationError is the validation error returned by
// PermissionEntity.Validate if the designated constraints aren't met.
type PermissionEntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionEntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionEntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionEntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionEntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionEntityValidationError) ErrorName() string { return "PermissionEntityValidationError" }

// Error satisfies the builtin error interface
func (e PermissionEntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionEntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionEntityValidationError{}

// Validate checks the field values on PermissionKey with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PermissionKey) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// PermissionKeyValidationError is the validation error returned by
// PermissionKey.Validate if the designated constraints aren't met.
type PermissionKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionKeyValidationError) ErrorName() string { return "PermissionKeyValidationError" }

// Error satisfies the builtin error interface
func (e PermissionKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionKeyValidationError{}

// Validate checks the field values on PermissionEntities with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PermissionEntities) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PermissionEntitiesValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PermissionEntitiesValidationError is the validation error returned by
// PermissionEntities.Validate if the designated constraints aren't met.
type PermissionEntitiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionEntitiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionEntitiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionEntitiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionEntitiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionEntitiesValidationError) ErrorName() string {
	return "PermissionEntitiesValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionEntitiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionEntities.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionEntitiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionEntitiesValidationError{}

// Validate checks the field values on PermissionCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PermissionCheckRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetUserKey()) < 1 {
		return PermissionCheckRequestValidationError{
			field:  "UserKey",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetOrganizationName()) < 1 {
		return PermissionCheckRequestValidationError{
			field:  "OrganizationName",
			reason: "value length must be at least 1 runes",
		}
	}

	if len(m.GetPermissionNames()) < 1 {
		return PermissionCheckRequestValidationError{
			field:  "PermissionNames",
			reason: "value must contain at least 1 item(s)",
		}
	}

	return nil
}

// PermissionCheckRequestValidationError is the validation error returned by
// PermissionCheckRequest.Validate if the designated constraints aren't met.
type PermissionCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionCheckRequestValidationError) ErrorName() string {
	return "PermissionCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionCheckRequestValidationError{}

// Validate checks the field values on PermissionCheckResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PermissionCheckResult) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	// no validation rules for Message

	return nil
}

// PermissionCheckResultValidationError is the validation error returned by
// PermissionCheckResult.Validate if the designated constraints aren't met.
type PermissionCheckResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionCheckResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionCheckResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionCheckResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionCheckResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionCheckResultValidationError) ErrorName() string {
	return "PermissionCheckResultValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionCheckResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionCheckResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionCheckResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionCheckResultValidationError{}

// Validate checks the field values on RoleEntity with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RoleEntity) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return RoleEntityValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		return RoleEntityValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
	}

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleEntityValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleEntityValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RoleEntityValidationError is the validation error returned by
// RoleEntity.Validate if the designated constraints aren't met.
type RoleEntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleEntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleEntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleEntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleEntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleEntityValidationError) ErrorName() string { return "RoleEntityValidationError" }

// Error satisfies the builtin error interface
func (e RoleEntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleEntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleEntityValidationError{}

// Validate checks the field values on RoleUpdateEntity with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RoleUpdateEntity) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return RoleUpdateEntityValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		return RoleUpdateEntityValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for OrganizationId

	return nil
}

// RoleUpdateEntityValidationError is the validation error returned by
// RoleUpdateEntity.Validate if the designated constraints aren't met.
type RoleUpdateEntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleUpdateEntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleUpdateEntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleUpdateEntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleUpdateEntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleUpdateEntityValidationError) ErrorName() string { return "RoleUpdateEntityValidationError" }

// Error satisfies the builtin error interface
func (e RoleUpdateEntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleUpdateEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleUpdateEntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleUpdateEntityValidationError{}

// Validate checks the field values on RoleKey with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RoleKey) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for OrganizationId

	return nil
}

// RoleKeyValidationError is the validation error returned by RoleKey.Validate
// if the designated constraints aren't met.
type RoleKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleKeyValidationError) ErrorName() string { return "RoleKeyValidationError" }

// Error satisfies the builtin error interface
func (e RoleKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleKeyValidationError{}

// Validate checks the field values on RoleFindAll with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RoleFindAll) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OrganizationId

	return nil
}

// RoleFindAllValidationError is the validation error returned by
// RoleFindAll.Validate if the designated constraints aren't met.
type RoleFindAllValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleFindAllValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleFindAllValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleFindAllValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleFindAllValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleFindAllValidationError) ErrorName() string { return "RoleFindAllValidationError" }

// Error satisfies the builtin error interface
func (e RoleFindAllValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleFindAll.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleFindAllValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleFindAllValidationError{}

// Validate checks the field values on RoleEntities with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RoleEntities) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleEntitiesValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OrganizationId

	return nil
}

// RoleEntitiesValidationError is the validation error returned by
// RoleEntities.Validate if the designated constraints aren't met.
type RoleEntitiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleEntitiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleEntitiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleEntitiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleEntitiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleEntitiesValidationError) ErrorName() string { return "RoleEntitiesValidationError" }

// Error satisfies the builtin error interface
func (e RoleEntitiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleEntities.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleEntitiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleEntitiesValidationError{}

// Validate checks the field values on RoleReleationPermission with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RoleReleationPermission) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for PermissionId

	// no validation rules for OrganizationId

	return nil
}

// RoleReleationPermissionValidationError is the validation error returned by
// RoleReleationPermission.Validate if the designated constraints aren't met.
type RoleReleationPermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleReleationPermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleReleationPermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleReleationPermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleReleationPermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleReleationPermissionValidationError) ErrorName() string {
	return "RoleReleationPermissionValidationError"
}

// Error satisfies the builtin error interface
func (e RoleReleationPermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleReleationPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleReleationPermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleReleationPermissionValidationError{}

// Validate checks the field values on RoleReleationPermissions with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RoleReleationPermissions) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleReleationPermissionsValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OrganizationId

	return nil
}

// RoleReleationPermissionsValidationError is the validation error returned by
// RoleReleationPermissions.Validate if the designated constraints aren't met.
type RoleReleationPermissionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleReleationPermissionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleReleationPermissionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleReleationPermissionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleReleationPermissionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleReleationPermissionsValidationError) ErrorName() string {
	return "RoleReleationPermissionsValidationError"
}

// Error satisfies the builtin error interface
func (e RoleReleationPermissionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleReleationPermissions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleReleationPermissionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleReleationPermissionsValidationError{}

// Validate checks the field values on OrganizationEntity with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OrganizationEntity) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return OrganizationEntityValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		return OrganizationEntityValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
	}

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrganizationEntityValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// OrganizationEntityValidationError is the validation error returned by
// OrganizationEntity.Validate if the designated constraints aren't met.
type OrganizationEntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationEntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationEntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationEntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationEntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationEntityValidationError) ErrorName() string {
	return "OrganizationEntityValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationEntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationEntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationEntityValidationError{}

// Validate checks the field values on OrganizationUpdateEntity with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OrganizationUpdateEntity) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return OrganizationUpdateEntityValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		return OrganizationUpdateEntityValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// OrganizationUpdateEntityValidationError is the validation error returned by
// OrganizationUpdateEntity.Validate if the designated constraints aren't met.
type OrganizationUpdateEntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationUpdateEntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationUpdateEntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationUpdateEntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationUpdateEntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationUpdateEntityValidationError) ErrorName() string {
	return "OrganizationUpdateEntityValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationUpdateEntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationUpdateEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationUpdateEntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationUpdateEntityValidationError{}

// Validate checks the field values on OrganizationEntities with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OrganizationEntities) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetOrganizations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrganizationEntitiesValidationError{
					field:  fmt.Sprintf("Organizations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// OrganizationEntitiesValidationError is the validation error returned by
// OrganizationEntities.Validate if the designated constraints aren't met.
type OrganizationEntitiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationEntitiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationEntitiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationEntitiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationEntitiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationEntitiesValidationError) ErrorName() string {
	return "OrganizationEntitiesValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationEntitiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationEntities.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationEntitiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationEntitiesValidationError{}

// Validate checks the field values on OrganizationKey with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *OrganizationKey) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return OrganizationKeyValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// OrganizationKeyValidationError is the validation error returned by
// OrganizationKey.Validate if the designated constraints aren't met.
type OrganizationKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationKeyValidationError) ErrorName() string { return "OrganizationKeyValidationError" }

// Error satisfies the builtin error interface
func (e OrganizationKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationKeyValidationError{}

// Validate checks the field values on AddOrganizationUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddOrganizationUser) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return AddOrganizationUserValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		return AddOrganizationUserValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// AddOrganizationUserValidationError is the validation error returned by
// AddOrganizationUser.Validate if the designated constraints aren't met.
type AddOrganizationUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrganizationUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrganizationUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrganizationUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrganizationUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrganizationUserValidationError) ErrorName() string {
	return "AddOrganizationUserValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrganizationUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrganizationUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrganizationUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrganizationUserValidationError{}

// Validate checks the field values on DeleteOrganizationUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteOrganizationUser) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return DeleteOrganizationUserValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		return DeleteOrganizationUserValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// DeleteOrganizationUserValidationError is the validation error returned by
// DeleteOrganizationUser.Validate if the designated constraints aren't met.
type DeleteOrganizationUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationUserValidationError) ErrorName() string {
	return "DeleteOrganizationUserValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationUserValidationError{}

// Validate checks the field values on ChunkType with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ChunkType) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Data

	return nil
}

// ChunkTypeValidationError is the validation error returned by
// ChunkType.Validate if the designated constraints aren't met.
type ChunkTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChunkTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChunkTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChunkTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChunkTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChunkTypeValidationError) ErrorName() string { return "ChunkTypeValidationError" }

// Error satisfies the builtin error interface
func (e ChunkTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChunkType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChunkTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChunkTypeValidationError{}

// Validate checks the field values on FileType with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FileType) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Size

	for idx, item := range m.GetOption() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileTypeValidationError{
					field:  fmt.Sprintf("Option[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// FileTypeValidationError is the validation error returned by
// FileType.Validate if the designated constraints aren't met.
type FileTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileTypeValidationError) ErrorName() string { return "FileTypeValidationError" }

// Error satisfies the builtin error interface
func (e FileTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileTypeValidationError{}

// Validate checks the field values on UserUploader with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserUploader) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Data

	if v, ok := interface{}(m.GetFileType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserUploaderValidationError{
				field:  "FileType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UserUploaderValidationError is the validation error returned by
// UserUploader.Validate if the designated constraints aren't met.
type UserUploaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUploaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUploaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUploaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUploaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUploaderValidationError) ErrorName() string { return "UserUploaderValidationError" }

// Error satisfies the builtin error interface
func (e UserUploaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUploader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUploaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUploaderValidationError{}

// Validate checks the field values on FileType_FileOption with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FileType_FileOption) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	return nil
}

// FileType_FileOptionValidationError is the validation error returned by
// FileType_FileOption.Validate if the designated constraints aren't met.
type FileType_FileOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileType_FileOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileType_FileOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileType_FileOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileType_FileOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileType_FileOptionValidationError) ErrorName() string {
	return "FileType_FileOptionValidationError"
}

// Error satisfies the builtin error interface
func (e FileType_FileOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileType_FileOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileType_FileOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileType_FileOptionValidationError{}
