syntax = "proto3";

package ncs.rbns;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "envoyproxy/protoc-gen-validate/validate/validate.proto";

option go_package = "./protobuf";

service Permission {
    // FindById is find by id
    rpc FindById (permissionKey) returns (permissionEntity) {
        option (google.api.http) = {
            get: "/api/v1/permissions/{id}"
        };
    }
    // Update is permission entity update
    rpc Update (permissionEntity) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/v1/permissions/{id}"
            body: "*"
        };
    }
    // Delete is permission entity delete
    rpc Delete (permissionKey) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/permissions/{id}"
        };
    }
    // Create is create permission
    rpc Create (permissionEntities) returns (permissionEntities) {
        option (google.api.http) = {
            post: "/api/v1/permissions"
            body: "*"
        };
    }
    // FindAll is find by application id return permissions
    rpc FindAll (google.protobuf.Empty) returns (permissionEntities) {
        option (google.api.http) = {
            get: "/api/v1/permissions"
        };
    }

}

service Organization {
    // FindById is application id and organization id
    rpc FindById (organizationKey) returns (organizationEntity) {
        option (google.api.http) = {
            get: "/api/v1/organizations/{id}"
        };
    }
    // Update is organization entity update
    rpc Update (organizationUpdateEntity) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/v1/organizations/{id}"
            body: "*"
        };
    }
    // Delete is organization entity delete
    rpc Delete (organizationKey) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/organizations/{id}"
        };
    }

    rpc AddUser (addOrganizationUser) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/organizations/{id}/users"
            body: "*"
        };
    }

    rpc DeleteUser (deleteOrganizationUser) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/organizations/{id}/users/{userId}"
        };
    }

    // DeleteRolePermission is delete permission to the role
    rpc DeleteRolePermission (roleReleationPermission) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/organizations/{organizationId}/roles/{id}/permissions/{permissionId}"
        };
    }
    // GetRolePermissions is get permission to the role
    rpc GetRolePermissions (roleKey) returns (permissionEntities) {
        option (google.api.http) = {
            get: "/api/v1/organizations/{organizationId}/roles/{id}/permissions"
        };
    }
    // AddPermissions is add permission to the role
    rpc AddRolePermissions (roleReleationPermissions) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/v1/organizations/{organizationId}/roles/{id}/permissions"
            body: "*"
        };
    }
    // DeleteRolePermissions is delete permission to the role
    rpc DeleteRolePermissions (roleReleationPermissions) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/organizations/{organizationId}/roles/{id}/permissions"
            body: "*"
        };
    }

    // FindByIdRole is find by id
    rpc FindByIdRole (roleKey) returns (roleEntity) {
        option (google.api.http) = {
            get: "/api/v1/organizations/{organizationId}/roles/{id}"
        };
    }
    // UpdateRole is role entity update
    rpc UpdateRole (roleUpdateEntity) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/v1/organizations/{organizationId}/roles/{id}"
            body: "*"
        };
    }
    // DeleteRole is role entity delete
    rpc DeleteRole (roleKey) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/organizations/{organizationId}/roles/{id}"
        };
    }
    // CreateRole is create role
    rpc CreateRole (roleEntities) returns (roleEntities) {
        option (google.api.http) = {
            post: "/api/v1/organizations/{organizationId}/roles"
            body: "*"
        };
    }
    // FindAllRole is find roles
    rpc FindAllRole (roleFindAll) returns (roleEntities) {
        option (google.api.http) = {
            get: "/api/v1/organizations/{organizationId}/roles"
        };
    }

    // Create is create orgnization
    rpc Create (organizationEntity) returns (organizationEntity)  {
        option (google.api.http) = {
            post: "/api/v1/organizations"
            body: "*"
        };
    }
    // FindAll is application is return organizations
    rpc FindAll (google.protobuf.Empty) returns (organizationEntities) {
        option (google.api.http) = {
            get: "/api/v1/organizations"
        };
    }
}

service User {
    
    // FindById is find organization id and user key
    rpc FindById (userKey) returns (userEntity) {
        option (google.api.http) = {
            get: "/api/v1/users/{id}"
        };
    }

    // Delete is delete user
    rpc Delete (userKey) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/users/{id}"
        };
    }

    // DeleteRole is delete role to user  
    rpc DeleteRole (userRoleDelete) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/users/{id}/roles/{roleId}"
        };
    }

    // AddRoles is add role to user  
    rpc AddRoles (userRole) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/v1/users/{id}/roles"
            body: "*"
        };
    }

    // DeleteRoles is delete role to user  
    rpc DeleteRoles (userRole) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/users/{id}/roles"
            body: "*"
        };
    }

    // Create is create user
    rpc Create (userCreateKey) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/users"
            body: "*"
        };
    }

    rpc Uploader(UserUploader) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/users/files"
            body: "*"
        };
    }
}


message userKey {
    string id = 1;
    string name = 2;
}

message userEntity {
    string id = 1;
    string name = 2;
    repeated roleEntity roles = 3;
    repeated permissionEntity permissions = 4;
}

message userCreateKey {
    string id = 1;
    string name = 2;
}

message userRole {
    string id = 1;
    string organizationId = 2 [(validate.rules).string = {min_len: 1}];
    repeated roleKey roles = 3;
}

message userRoleDelete {
    string id = 1 [(validate.rules).string = {min_len: 1}];
    string organizationId = 2 [(validate.rules).string = {min_len: 1}];
    string roleId = 3 [(validate.rules).string = {min_len: 1}];
}

message permissionEntity {
    string id = 1;
    string name = 2 [(validate.rules).string = {min_len: 1}];
    string description = 3 [(validate.rules).string = {min_len: 1}];
}

message permissionKey {
    string id = 1;
}

message permissionEntities {
    repeated permissionEntity permissions = 1;
}

message permissionCheckRequest {
    string userKey = 1 [(validate.rules).string = {min_len: 1}];
    string organizationName = 2 [(validate.rules).string = {min_len: 1}];
    repeated string permissionNames = 3 [(validate.rules).repeated.min_items = 1];
}

message permissionCheckResult {
    bool result = 1;
    string message = 2;
}

message roleEntity {
    string id = 1;
    string name = 2 [(validate.rules).string = {min_len: 1}];
    string description = 3 [(validate.rules).string = {min_len: 1}];
    repeated permissionEntity permissions = 4;
    repeated userKey users = 5;
}

message roleUpdateEntity {
    string id = 1;
    string name = 2 [(validate.rules).string = {min_len: 1}];
    string description = 3 [(validate.rules).string = {min_len: 1}];
    string organizationId = 4;
}

message roleKey {
    string id = 1;
    string organizationId = 2;
}

message roleFindAll {
    string organizationId = 1; 
}

message roleEntities {
    repeated roleEntity roles = 1;
    string organizationId = 2;
}

message roleReleationPermission {
    string id = 1;
    string permissionId = 2;
    string organizationId = 3;
}

message roleReleationPermissions {
    string id = 1;
    repeated permissionKey permissions = 2;
    string organizationId = 3;
}

message organizationEntity {
    string id = 1;
    string name = 2 [(validate.rules).string = {min_len: 1}];
    string description = 3 [(validate.rules).string = {min_len: 1}];
    repeated userEntity users = 4;
}

message organizationUpdateEntity {
    string id = 1;
    string name = 2 [(validate.rules).string = {min_len: 1}];
    string description = 3 [(validate.rules).string = {min_len: 1}];
}

message organizationEntities {
    repeated organizationEntity organizations = 1;
}

message organizationKey {
    string id = 1 [(validate.rules).string = {min_len: 1}];
}

message addOrganizationUser {
    string id = 1 [(validate.rules).string = {min_len: 1}];
    string userId = 2 [(validate.rules).string = {min_len: 1}];
}

message deleteOrganizationUser {
    string id = 1 [(validate.rules).string = {min_len: 1}];
    string userId = 2 [(validate.rules).string = {min_len: 1}];
}

message ChunkType {
    bytes data = 1;
}

message FileType {
    string name = 1;
    int64 size = 2;
    message FileOption {
        string key = 1;
        repeated string values = 2;
    }
    repeated FileOption option = 3;
}


message UserUploader {
    string data = 1;
    FileType fileType = 2;
}