// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PermissionClient is the client API for Permission service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionClient interface {
	// FindById is find by id
	FindById(ctx context.Context, in *PermissionKey, opts ...grpc.CallOption) (*PermissionEntity, error)
	// Update is permission entity update
	Update(ctx context.Context, in *PermissionEntity, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete is permission entity delete
	Delete(ctx context.Context, in *PermissionKey, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Create is create permission
	Create(ctx context.Context, in *PermissionEntities, opts ...grpc.CallOption) (*PermissionEntities, error)
	// FindAll is find by application id return permissions
	FindAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PermissionEntities, error)
}

type permissionClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionClient(cc grpc.ClientConnInterface) PermissionClient {
	return &permissionClient{cc}
}

func (c *permissionClient) FindById(ctx context.Context, in *PermissionKey, opts ...grpc.CallOption) (*PermissionEntity, error) {
	out := new(PermissionEntity)
	err := c.cc.Invoke(ctx, "/ncs.rbns.Permission/FindById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) Update(ctx context.Context, in *PermissionEntity, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ncs.rbns.Permission/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) Delete(ctx context.Context, in *PermissionKey, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ncs.rbns.Permission/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) Create(ctx context.Context, in *PermissionEntities, opts ...grpc.CallOption) (*PermissionEntities, error) {
	out := new(PermissionEntities)
	err := c.cc.Invoke(ctx, "/ncs.rbns.Permission/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) FindAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PermissionEntities, error) {
	out := new(PermissionEntities)
	err := c.cc.Invoke(ctx, "/ncs.rbns.Permission/FindAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionServer is the server API for Permission service.
// All implementations should embed UnimplementedPermissionServer
// for forward compatibility
type PermissionServer interface {
	// FindById is find by id
	FindById(context.Context, *PermissionKey) (*PermissionEntity, error)
	// Update is permission entity update
	Update(context.Context, *PermissionEntity) (*emptypb.Empty, error)
	// Delete is permission entity delete
	Delete(context.Context, *PermissionKey) (*emptypb.Empty, error)
	// Create is create permission
	Create(context.Context, *PermissionEntities) (*PermissionEntities, error)
	// FindAll is find by application id return permissions
	FindAll(context.Context, *emptypb.Empty) (*PermissionEntities, error)
}

// UnimplementedPermissionServer should be embedded to have forward compatible implementations.
type UnimplementedPermissionServer struct {
}

func (UnimplementedPermissionServer) FindById(context.Context, *PermissionKey) (*PermissionEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedPermissionServer) Update(context.Context, *PermissionEntity) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPermissionServer) Delete(context.Context, *PermissionKey) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPermissionServer) Create(context.Context, *PermissionEntities) (*PermissionEntities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPermissionServer) FindAll(context.Context, *emptypb.Empty) (*PermissionEntities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}

// UnsafePermissionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionServer will
// result in compilation errors.
type UnsafePermissionServer interface {
	mustEmbedUnimplementedPermissionServer()
}

func RegisterPermissionServer(s grpc.ServiceRegistrar, srv PermissionServer) {
	s.RegisterService(&Permission_ServiceDesc, srv)
}

func _Permission_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.Permission/FindById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).FindById(ctx, req.(*PermissionKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.Permission/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).Update(ctx, req.(*PermissionEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.Permission/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).Delete(ctx, req.(*PermissionKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionEntities)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.Permission/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).Create(ctx, req.(*PermissionEntities))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.Permission/FindAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).FindAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Permission_ServiceDesc is the grpc.ServiceDesc for Permission service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Permission_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.rbns.Permission",
	HandlerType: (*PermissionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindById",
			Handler:    _Permission_FindById_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Permission_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Permission_Delete_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Permission_Create_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _Permission_FindAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api-rbac.proto",
}

// OrganizationClient is the client API for Organization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationClient interface {
	// FindById is application id and organization id
	FindById(ctx context.Context, in *OrganizationKey, opts ...grpc.CallOption) (*OrganizationEntity, error)
	// Update is organization entity update
	Update(ctx context.Context, in *OrganizationUpdateEntity, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete is organization entity delete
	Delete(ctx context.Context, in *OrganizationKey, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddUser(ctx context.Context, in *AddOrganizationUser, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteUser(ctx context.Context, in *DeleteOrganizationUser, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteRolePermission is delete permission to the role
	DeleteRolePermission(ctx context.Context, in *RoleReleationPermission, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetRolePermissions is get permission to the role
	GetRolePermissions(ctx context.Context, in *RoleKey, opts ...grpc.CallOption) (*PermissionEntities, error)
	// AddPermissions is add permission to the role
	AddRolePermissions(ctx context.Context, in *RoleReleationPermissions, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteRolePermissions is delete permission to the role
	DeleteRolePermissions(ctx context.Context, in *RoleReleationPermissions, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// FindByIdRole is find by id
	FindByIdRole(ctx context.Context, in *RoleKey, opts ...grpc.CallOption) (*RoleEntity, error)
	// UpdateRole is role entity update
	UpdateRole(ctx context.Context, in *RoleUpdateEntity, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteRole is role entity delete
	DeleteRole(ctx context.Context, in *RoleKey, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateRole is create role
	CreateRole(ctx context.Context, in *RoleEntities, opts ...grpc.CallOption) (*RoleEntities, error)
	// FindAllRole is find roles
	FindAllRole(ctx context.Context, in *RoleFindAll, opts ...grpc.CallOption) (*RoleEntities, error)
	// Create is create orgnization
	Create(ctx context.Context, in *OrganizationEntity, opts ...grpc.CallOption) (*OrganizationEntity, error)
	// FindAll is application is return organizations
	FindAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OrganizationEntities, error)
}

type organizationClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationClient(cc grpc.ClientConnInterface) OrganizationClient {
	return &organizationClient{cc}
}

func (c *organizationClient) FindById(ctx context.Context, in *OrganizationKey, opts ...grpc.CallOption) (*OrganizationEntity, error) {
	out := new(OrganizationEntity)
	err := c.cc.Invoke(ctx, "/ncs.rbns.Organization/FindById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) Update(ctx context.Context, in *OrganizationUpdateEntity, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ncs.rbns.Organization/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) Delete(ctx context.Context, in *OrganizationKey, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ncs.rbns.Organization/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) AddUser(ctx context.Context, in *AddOrganizationUser, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ncs.rbns.Organization/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) DeleteUser(ctx context.Context, in *DeleteOrganizationUser, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ncs.rbns.Organization/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) DeleteRolePermission(ctx context.Context, in *RoleReleationPermission, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ncs.rbns.Organization/DeleteRolePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) GetRolePermissions(ctx context.Context, in *RoleKey, opts ...grpc.CallOption) (*PermissionEntities, error) {
	out := new(PermissionEntities)
	err := c.cc.Invoke(ctx, "/ncs.rbns.Organization/GetRolePermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) AddRolePermissions(ctx context.Context, in *RoleReleationPermissions, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ncs.rbns.Organization/AddRolePermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) DeleteRolePermissions(ctx context.Context, in *RoleReleationPermissions, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ncs.rbns.Organization/DeleteRolePermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) FindByIdRole(ctx context.Context, in *RoleKey, opts ...grpc.CallOption) (*RoleEntity, error) {
	out := new(RoleEntity)
	err := c.cc.Invoke(ctx, "/ncs.rbns.Organization/FindByIdRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) UpdateRole(ctx context.Context, in *RoleUpdateEntity, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ncs.rbns.Organization/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) DeleteRole(ctx context.Context, in *RoleKey, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ncs.rbns.Organization/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) CreateRole(ctx context.Context, in *RoleEntities, opts ...grpc.CallOption) (*RoleEntities, error) {
	out := new(RoleEntities)
	err := c.cc.Invoke(ctx, "/ncs.rbns.Organization/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) FindAllRole(ctx context.Context, in *RoleFindAll, opts ...grpc.CallOption) (*RoleEntities, error) {
	out := new(RoleEntities)
	err := c.cc.Invoke(ctx, "/ncs.rbns.Organization/FindAllRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) Create(ctx context.Context, in *OrganizationEntity, opts ...grpc.CallOption) (*OrganizationEntity, error) {
	out := new(OrganizationEntity)
	err := c.cc.Invoke(ctx, "/ncs.rbns.Organization/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) FindAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OrganizationEntities, error) {
	out := new(OrganizationEntities)
	err := c.cc.Invoke(ctx, "/ncs.rbns.Organization/FindAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationServer is the server API for Organization service.
// All implementations should embed UnimplementedOrganizationServer
// for forward compatibility
type OrganizationServer interface {
	// FindById is application id and organization id
	FindById(context.Context, *OrganizationKey) (*OrganizationEntity, error)
	// Update is organization entity update
	Update(context.Context, *OrganizationUpdateEntity) (*emptypb.Empty, error)
	// Delete is organization entity delete
	Delete(context.Context, *OrganizationKey) (*emptypb.Empty, error)
	AddUser(context.Context, *AddOrganizationUser) (*emptypb.Empty, error)
	DeleteUser(context.Context, *DeleteOrganizationUser) (*emptypb.Empty, error)
	// DeleteRolePermission is delete permission to the role
	DeleteRolePermission(context.Context, *RoleReleationPermission) (*emptypb.Empty, error)
	// GetRolePermissions is get permission to the role
	GetRolePermissions(context.Context, *RoleKey) (*PermissionEntities, error)
	// AddPermissions is add permission to the role
	AddRolePermissions(context.Context, *RoleReleationPermissions) (*emptypb.Empty, error)
	// DeleteRolePermissions is delete permission to the role
	DeleteRolePermissions(context.Context, *RoleReleationPermissions) (*emptypb.Empty, error)
	// FindByIdRole is find by id
	FindByIdRole(context.Context, *RoleKey) (*RoleEntity, error)
	// UpdateRole is role entity update
	UpdateRole(context.Context, *RoleUpdateEntity) (*emptypb.Empty, error)
	// DeleteRole is role entity delete
	DeleteRole(context.Context, *RoleKey) (*emptypb.Empty, error)
	// CreateRole is create role
	CreateRole(context.Context, *RoleEntities) (*RoleEntities, error)
	// FindAllRole is find roles
	FindAllRole(context.Context, *RoleFindAll) (*RoleEntities, error)
	// Create is create orgnization
	Create(context.Context, *OrganizationEntity) (*OrganizationEntity, error)
	// FindAll is application is return organizations
	FindAll(context.Context, *emptypb.Empty) (*OrganizationEntities, error)
}

// UnimplementedOrganizationServer should be embedded to have forward compatible implementations.
type UnimplementedOrganizationServer struct {
}

func (UnimplementedOrganizationServer) FindById(context.Context, *OrganizationKey) (*OrganizationEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedOrganizationServer) Update(context.Context, *OrganizationUpdateEntity) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOrganizationServer) Delete(context.Context, *OrganizationKey) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOrganizationServer) AddUser(context.Context, *AddOrganizationUser) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedOrganizationServer) DeleteUser(context.Context, *DeleteOrganizationUser) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedOrganizationServer) DeleteRolePermission(context.Context, *RoleReleationPermission) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRolePermission not implemented")
}
func (UnimplementedOrganizationServer) GetRolePermissions(context.Context, *RoleKey) (*PermissionEntities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolePermissions not implemented")
}
func (UnimplementedOrganizationServer) AddRolePermissions(context.Context, *RoleReleationPermissions) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRolePermissions not implemented")
}
func (UnimplementedOrganizationServer) DeleteRolePermissions(context.Context, *RoleReleationPermissions) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRolePermissions not implemented")
}
func (UnimplementedOrganizationServer) FindByIdRole(context.Context, *RoleKey) (*RoleEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIdRole not implemented")
}
func (UnimplementedOrganizationServer) UpdateRole(context.Context, *RoleUpdateEntity) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedOrganizationServer) DeleteRole(context.Context, *RoleKey) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedOrganizationServer) CreateRole(context.Context, *RoleEntities) (*RoleEntities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedOrganizationServer) FindAllRole(context.Context, *RoleFindAll) (*RoleEntities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllRole not implemented")
}
func (UnimplementedOrganizationServer) Create(context.Context, *OrganizationEntity) (*OrganizationEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrganizationServer) FindAll(context.Context, *emptypb.Empty) (*OrganizationEntities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}

// UnsafeOrganizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationServer will
// result in compilation errors.
type UnsafeOrganizationServer interface {
	mustEmbedUnimplementedOrganizationServer()
}

func RegisterOrganizationServer(s grpc.ServiceRegistrar, srv OrganizationServer) {
	s.RegisterService(&Organization_ServiceDesc, srv)
}

func _Organization_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.Organization/FindById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).FindById(ctx, req.(*OrganizationKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationUpdateEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.Organization/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).Update(ctx, req.(*OrganizationUpdateEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.Organization/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).Delete(ctx, req.(*OrganizationKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrganizationUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.Organization/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).AddUser(ctx, req.(*AddOrganizationUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.Organization/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).DeleteUser(ctx, req.(*DeleteOrganizationUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_DeleteRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleReleationPermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).DeleteRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.Organization/DeleteRolePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).DeleteRolePermission(ctx, req.(*RoleReleationPermission))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_GetRolePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).GetRolePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.Organization/GetRolePermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).GetRolePermissions(ctx, req.(*RoleKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_AddRolePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleReleationPermissions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).AddRolePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.Organization/AddRolePermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).AddRolePermissions(ctx, req.(*RoleReleationPermissions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_DeleteRolePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleReleationPermissions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).DeleteRolePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.Organization/DeleteRolePermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).DeleteRolePermissions(ctx, req.(*RoleReleationPermissions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_FindByIdRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).FindByIdRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.Organization/FindByIdRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).FindByIdRole(ctx, req.(*RoleKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUpdateEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.Organization/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).UpdateRole(ctx, req.(*RoleUpdateEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.Organization/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).DeleteRole(ctx, req.(*RoleKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleEntities)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.Organization/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).CreateRole(ctx, req.(*RoleEntities))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_FindAllRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleFindAll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).FindAllRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.Organization/FindAllRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).FindAllRole(ctx, req.(*RoleFindAll))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.Organization/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).Create(ctx, req.(*OrganizationEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.Organization/FindAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).FindAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Organization_ServiceDesc is the grpc.ServiceDesc for Organization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Organization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.rbns.Organization",
	HandlerType: (*OrganizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindById",
			Handler:    _Organization_FindById_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Organization_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Organization_Delete_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Organization_AddUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Organization_DeleteUser_Handler,
		},
		{
			MethodName: "DeleteRolePermission",
			Handler:    _Organization_DeleteRolePermission_Handler,
		},
		{
			MethodName: "GetRolePermissions",
			Handler:    _Organization_GetRolePermissions_Handler,
		},
		{
			MethodName: "AddRolePermissions",
			Handler:    _Organization_AddRolePermissions_Handler,
		},
		{
			MethodName: "DeleteRolePermissions",
			Handler:    _Organization_DeleteRolePermissions_Handler,
		},
		{
			MethodName: "FindByIdRole",
			Handler:    _Organization_FindByIdRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Organization_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Organization_DeleteRole_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Organization_CreateRole_Handler,
		},
		{
			MethodName: "FindAllRole",
			Handler:    _Organization_FindAllRole_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Organization_Create_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _Organization_FindAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api-rbac.proto",
}

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// FindById is find organization id and user key
	FindById(ctx context.Context, in *UserKey, opts ...grpc.CallOption) (*UserEntity, error)
	// Delete is delete user
	Delete(ctx context.Context, in *UserKey, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteRole is delete role to user
	DeleteRole(ctx context.Context, in *UserRoleDelete, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// AddRoles is add role to user
	AddRoles(ctx context.Context, in *UserRole, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteRoles is delete role to user
	DeleteRoles(ctx context.Context, in *UserRole, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Create is create user
	Create(ctx context.Context, in *UserCreateKey, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Uploader(ctx context.Context, in *UserUploader, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) FindById(ctx context.Context, in *UserKey, opts ...grpc.CallOption) (*UserEntity, error) {
	out := new(UserEntity)
	err := c.cc.Invoke(ctx, "/ncs.rbns.User/FindById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Delete(ctx context.Context, in *UserKey, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ncs.rbns.User/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteRole(ctx context.Context, in *UserRoleDelete, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ncs.rbns.User/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddRoles(ctx context.Context, in *UserRole, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ncs.rbns.User/AddRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteRoles(ctx context.Context, in *UserRole, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ncs.rbns.User/DeleteRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Create(ctx context.Context, in *UserCreateKey, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ncs.rbns.User/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Uploader(ctx context.Context, in *UserUploader, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ncs.rbns.User/Uploader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations should embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// FindById is find organization id and user key
	FindById(context.Context, *UserKey) (*UserEntity, error)
	// Delete is delete user
	Delete(context.Context, *UserKey) (*emptypb.Empty, error)
	// DeleteRole is delete role to user
	DeleteRole(context.Context, *UserRoleDelete) (*emptypb.Empty, error)
	// AddRoles is add role to user
	AddRoles(context.Context, *UserRole) (*emptypb.Empty, error)
	// DeleteRoles is delete role to user
	DeleteRoles(context.Context, *UserRole) (*emptypb.Empty, error)
	// Create is create user
	Create(context.Context, *UserCreateKey) (*emptypb.Empty, error)
	Uploader(context.Context, *UserUploader) (*emptypb.Empty, error)
}

// UnimplementedUserServer should be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) FindById(context.Context, *UserKey) (*UserEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedUserServer) Delete(context.Context, *UserKey) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserServer) DeleteRole(context.Context, *UserRoleDelete) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedUserServer) AddRoles(context.Context, *UserRole) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoles not implemented")
}
func (UnimplementedUserServer) DeleteRoles(context.Context, *UserRole) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoles not implemented")
}
func (UnimplementedUserServer) Create(context.Context, *UserCreateKey) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserServer) Uploader(context.Context, *UserUploader) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uploader not implemented")
}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.User/FindById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindById(ctx, req.(*UserKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.User/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Delete(ctx, req.(*UserKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.User/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteRole(ctx, req.(*UserRoleDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.User/AddRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddRoles(ctx, req.(*UserRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.User/DeleteRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteRoles(ctx, req.(*UserRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.User/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Create(ctx, req.(*UserCreateKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Uploader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUploader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Uploader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.rbns.User/Uploader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Uploader(ctx, req.(*UserUploader))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.rbns.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindById",
			Handler:    _User_FindById_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _User_Delete_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _User_DeleteRole_Handler,
		},
		{
			MethodName: "AddRoles",
			Handler:    _User_AddRoles_Handler,
		},
		{
			MethodName: "DeleteRoles",
			Handler:    _User_DeleteRoles_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _User_Create_Handler,
		},
		{
			MethodName: "Uploader",
			Handler:    _User_Uploader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api-rbac.proto",
}
